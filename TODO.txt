

pet childhood sportsteam


ghc core notes

ghc options

-ddump-to-file
  - dump to file
-ddump-simpl
  - dump core, you have to find the .dump-simpl file

-dsuppress-coercions
-dsuppress-module-prefixes
-dsuppress-type-applications
  -above 3 removes stuff we don't care about
-ddump-ds
  -dumps desugar
-dverbose-core2core
  -dumps everything (includng all optimization stages)
-drule-check = <rule name>

-----
Error: cabal: Could not resolve dependencies:
[__0] trying: tinytools-vty-0.1.0.4 (user goal)
[__1] trying: tinytools-0.1.0.4 (dependency of tinytools-vty)
[__2] next goal: text-icu (dependency of tinytools)
[__2] rejecting: text-icu-0.8.0.2, text-icu-0.8.0.1 (conflict: pkg-config
package icu-i18n>=62.1, not found in the pkg-config database)
[__2] rejecting: text-icu-0.8.0 (conflict: pkg-config package icu-i18n-any,
not found in the pkg-config database)
[__2] trying: text-icu-0.7.1.0
[__3] trying: pretty-simple-4.1.2.0 (dependency of tinytools)
[__4] trying: hashable-1.4.3.0 (dependency of tinytools)
[__5] next goal: text (dependency of tinytools-vty)
[__5] rejecting: text-2.0.1/installed-2.0.1 (conflict: text-icu =>
text>=0.9.1.0 && <2)
[__5] skipping: text-2.0.2, text-2.0.1, text-2.0 (has the same characteristics
that caused the previous version to fail: excluded by constraint '>=0.9.1.0 &&
<2' from 'text-icu')
[__5] trying: text-1.2.5.0
[__6] next goal: base (dependency of tinytools-vty)
[__6] rejecting: base-4.17.0.0/installed-4.17.0.0 (conflict: text =>
ghc-prim>=0.2 && <0.9, base => ghc-prim==0.9.0/installed-0.9.0)
[__6] rejecting: base-4.18.0.0, base-4.17.2.0, base-4.17.1.0, base-4.17.0.0,
base-4.16.4.0, base-4.16.3.0, base-4.16.2.0, base-4.16.1.0, base-4.16.0.0,
base-4.15.1.0, base-4.15.0.0, base-4.14.3.0, base-4.14.2.0, base-4.14.1.0,
base-4.14.0.0, base-4.13.0.0, base-4.12.0.0, base-4.11.1.0, base-4.11.0.0,
base-4.10.1.0, base-4.10.0.0, base-4.9.1.0, base-4.9.0.0, base-4.8.2.0,
base-4.8.1.0, base-4.8.0.0, base-4.7.0.2, base-4.7.0.1, base-4.7.0.0,
base-4.6.0.1, base-4.6.0.0, base-4.5.1.0, base-4.5.0.0, base-4.4.1.0,
base-4.4.0.0, base-4.3.1.0, base-4.3.0.0, base-4.2.0.2, base-4.2.0.1,
base-4.2.0.0, base-4.1.0.0, base-4.0.0.0, base-3.0.3.2, base-3.0.3.1
(constraint from non-upgradeable package requires installed instance)
[__6] fail (backjumping, conflict set: base, text, tinytools-vty)
After searching the rest of the dependency tree exhaustively, these were the
goals I've had most trouble fulfilling: base, text, hashable, tinytools,
unordered-containers, mono-traversable, text-icu, pretty-simple, tinytools-vty
Try running with --minimize-conflict-set to improve the error message.

----------
to get call stacks, first build with:
stack build --profile
then run with:
stack exec --profile -- potato-flow-vty-exe +RTS -xc

stack exec -- potato-flow-vty-exe mycommandlineargs
stack test --test-arguments=' --match "LineDrawer"' --file-watch
[![CircleCI](https://circleci.com/gh/pdlla/potato-flow.svg?style=svg)](https://circleci.com/gh/pdlla/potato-flow)


cabal test --test-options='--match "/Potato.Flow.Controller.General/General/has_unsaved_changes_basic"'

cabal test --test-options='--match "/Potato.Flow.Controller.Manipulator.Layers/Layers/drag_folder2_test"'

cabal run tinytools -- -help
 
----------

normal
ø×Ø⁐₪
↺↻

WIDE
😱
⧬⧭
⨀
⨂
🔓🔒
🔏🔐
📁
📂
👁️
🙈


:: glyph widget spec ::
-unicode char / full art
  -should single unicode be separate or no?
  -for unicode, how do handle grapheme clusters?
    -maybe just encourage folks to use OS-level picker instead?
-allow option to embed in definition file if height is only 1
-toggle option to search for only single char vs art
-separate file for single char glyph database maybe?
character_glpyhs


:: swatch spec ::

:: FUTURE FEATURES
IGNORE-grapheme cluster
  -terminals don't support it but browser will
  -for terminals, you need grapheme cluster detection to remove those chars
  -you may as well add unicode detections as well
  -need to update style types to take Text instead of Char to support grapheme clusters
DONE-EMOJIS
DONE-moveable line anchors
DONE-adjustable attachment spec
-swatches
-unicode character picker
  -lives at params level
  -must have a way to paste into text box
-clipart  picker
  -can choose to generate as text box or free art box
  -create link with orignal until modify?
  -format for user submitted clipart (prob just read from text file)
-fancy type spec
  -property of text box, allow you to enter fancy fonts
  -other features
    -per character width (already a property of TextZipper but you need to pass it in as a function and test it...)
    -kerning in general (or just have user use manual spaces)
    -height adjustment (some characters go over char box)
    -overflow box or crop (some characters go over char box
      -need to expand render box
    -font data type
      -bonus, it seme some fonts have speical rules for renfdering where the font overlaps
    -font picker...
-segment style multipoint line spec
-shape tool spec
  -can we generalize box and boxtext handlers to support any shape
    -I think you need to consider refactoring box handler whichever way
    -parameterize the following
      -transform box -> shape -> transform box (when resizing)
      -shape -> Maybe text label position
      -shape -> Maybe text area 
      -shape -> starting attachment position
      -shape -> attachement projection function
  -tool for creating non box shapes, must support resizing
    -allow snapping to only valid sizes?
      -however, should it remember what inbetween size it's at (when resizing multiple things) or no?
    -design generic format for doing shapes so easy to add custom shapes?
    -e.g. shapes
      -triangle
      -diamond
      -hexagon
      -octagon
      -circle/ellipse
      -3d cube (this might be a different handler? requires a 3rd degree of adjustment (could use box handler for creation, and separate handler for modify))
-straight line tool spec
  -same as autoline (with midpoints) but has fancy line rendering straight lines
  -line style picker
-scripting and extensions lol
-background pattern fills
  -crop or stop at end of last repeating pattern
-would be cool to have a way to manipulate multiple line midpoints at the same time
  -but really you should just switch to segment based midpoints instead..?
-multi-goat
-multi-shepard
-no partial owls!
  -except when converting remote changes to llamas



:: MDI REFACTOR NOTES 7/2023
IGNORE!!-get rid of PFWorkspace first
  DONE-get rid of lastChanges
  YES-or do we keep it? could be nic eplace to store preview list and local llama stack
DONE-handlers should return preview action
  -review pRefreshHandler as it will now take update cations
  -preview start, preview continue, preview commit, preview cancel
    -preview continue is prob unecessary, sending another preview start should implicitly cancel the last preview, but having it as an explicit state might still be nice
  -get rid of undofirst stuff
-goat changes
  -goat has preview list for each user
  DONE-goat has commit preview operation
  DONE-you can just directly preview commit to apply an operation without having preview I guess, or have a separate function to apply operation directly which might help with organization
  -preview commit could fail
    -a client might try and commit a preview that was invalidated 
  -goat needs to be able to apply several state changes,
    -do I need to make any changes to the SuperOwlChanges stuff?
      -probably union them all should just be fine, might have some useless info (i.e. do/undo one operation would leave an entry but didn't make any changes) in it but that's not a big deal.
-state changes
  -state needs to track preview changes to roll them back and reapply them when applying remote finalized changes 
  -state needs to track pending (commit but not finaized) changes i.e. CLIENT ROLLBACK so that commit operations can be applied locally and then sent to the network, but these might get overidden by the server
      -but this allows you to previwe->apply many operations before receiving updates so this is just better.
  -state needs to track change id/# (no # for preview changes)
-edge cases
  -handler in middle of preview operation and state update (i.e. refreshing an active handler)
    -in this case the refresh might return a preview cancel operation
  -conflicting previews
  -attaching to something that gets deleted
    -we do support attachment to deleted elt right now at the state level, not sure if it's supported at the handler level
  -how to handler layers hide/lock?
    -note these are not managed as llama actions weird!
    -prob easiest just to cancel any previews if anything gets lock/hidden, but maybe we can try and allow the preivew operation to complete, not sure if this is already done or super hard, could eb either!
    -however for undo/redo should be able to bypass
-llamastack updates
  -undo redo might fail if REltId does not exist. 
    -note that non-set llama changes do not contain a copy of the element so we can't just recreate it.
      -but maybe we can store a copy of the entire element to adjust for these cases?
      -but IMO maybe easier just to fail the whole do/undo operation in this case
        -gosh sure sucks if collaborator deletes a whole bunch of stuff though?
  -do we care that we are undo/redo overriding other peoples changes?
    -should be OK with fine grained changes
-will commute op1 op2
  -note that if op1 and op2 commute, we hope/expect op1 op2' to commute where op2' is a continuation of op2. But this isn't even strictly necessary and pRefreshHandler should just cancel the operation if it does not commute with some newly added operation
-need to create fine grain updaters rather than ones that set the entire owl to allow for better commuting
  -in particular
    -we don't want property updates to conflict with transform updates
    -we don't want layer hirerachy changes to conflict with other operations
  -confirm if PFCMove/add/delete is ok
  -the CTag PFCmd stuff needs to be redone as well as we want "set" style as oppose to deltas which don't play well if other changes had been applied on top of th particular fine grained change
  -The SLlama_Set stuff needs to be rewritten. Make like a SLlama_Update type deeal
-need to build multi-preview store inside of goat
  -???what happens when 2 previews conflict???
    -one person should just have their action cancelled I guess
      -sucks that you can lock out the entire scene by drag dropping everything
-soft locking elements that are being updated by other users?
  -we don't want to block selection because that would suck and we don't want to block params/layers update from other move operations
  -so I guess it's really just bblocking drag operations if someone else is dragging anything in our selection?
-highlight other user selection please
  -oof, need to make selection rendering a list??
    -maybe we can add color to the rendering? And combine it all selection into 1 renderer??
      -nah, probbaly better just to have separate renderer for each person
-Maybe there can be fine grain change history that lets you selectively undo and see who made what changes, that would be pretty cool!!!!
  -note the main issue here is that if there are a sequence of changes to the same fine-grained thing, it's weird to undo a change from a while ago, but maybe that's just how it is.
  -could store this is controller meta? Not really controller meta anymore though, so maybe create a separate object.. 
    -I mean PFWorkspace but I think it's better to store it side by side...
      -we do expect the state to be reconstructable from the change log so maybe it make sense to store it together with the state somehow?
-no conflict REltId generator
  -easiest just to go to 128 or 256 bits I guess....
-ordering service
  -preview -> Goat -> State
  -commit -> ordering service -> Goat -> State (rollback previews, apply commit change, apply reviews)
    -note this isn't e
  -consensus -> ordering service -> finalize commit -> Goat -> State (rollback previews, rollback commit state, apply finalized changes, apply unfinalized commits, apply previews)
  -consensus
    -just do hardcoded singel authority model for now, this also works well with the cloud model
    -need something sophisticated for P2P model :(, would be cool to do PBFT/PaLa but TBH raft is prob best since its tursted/permissioned
  -does ordering service need to know about state/non commuting changes
    -no it doesn't, goat can just toss out failed changes

:: RELEASE TODO ::
-make a video
-update tutorial file
-hardcode the xterm text width file?
-make a regular tutorial doc
-remove potato references :(
DONE-get rid of text box tool 
  IGNORE-fix box converting to text box
    DONE-add a UT for this...

::NEWEST TODO::
-layers improvements
  DONE-when dragging into a folder, the | should then L to the element being moved
  -currently not possible to drag the last element in folder outside of that folder if there's something below it
    -the trick is if you drag the last element in a folder to the spot below it, you need exception case to move it outside of the folder rather than as the next sibling to itself since that doesn't do anything
  -currently not possible to drag below a folder if the folder is thet last sibling :(
    -not sure if there's a way around this :(
  -DO THIS you might want to consider doing the thing where dragging to the right side of a folder puts it underneath, otherwise it's always a sibling
-undo_move is probably not very multi-user friendly, you should rewrite using do_move logic 
  -(so remove all children recursively and then add them back in)
  -(this will allow undo_move to work even if some of those childrens or parents have since been deleted I guess)
-shepard P2
  -you need to add a random generator to GoatState with sufficient entropy to generate Uuids
  -add shepard IDs
  -add shift ID
  -consider making a `State GoatState` Monad... 
  -deal with the undofirstsituation 
    -rename to mouseACtive?
    -just get rid of it and instead check if there is an associated local preview?)
-if both target and source of line is moved, then move midpoints as well
-BUG some prelude.!! error somewher ;__;
-text-icu dependency issue
  -pretty sure you just need to install text-icu
-line labels still cropping on right side
  -allow new linesi n line labels :O
-line anchor handlers should not pop up until you start dragging (except in creation mode where they should show from the get go)
-move all serializable types into Snake for versioning
-performance pass
  -https://medium.com/e-bot7-tech/improving-performance-of-your-haskell-code-with-profiteur-8d2e025b6779
-tests to add
  -make line label + "aoeu" + backspace a bunch of times and ensure the line does not get deleted
-cancelling a creation handler takes you back to empty handler
-the border/text params dialog should show when seleting box tool
-rename
  -OwlPFWorkspace -> OwlWorkspace
  -OwlPFState -> OwlState
-add render handler name property so you know what the render handler is from its renderhandleroutput
-BUG return key in layers during rename will act like "tab" taking you to params, don't do this
-REFACTOR split goat mouse intput into 2 commands, one for layer and one for canvas
-text zipper
  -you should just rewrite text zipper and add select support..
  -BUG wrapping when single word (when word wrapping wont fit anymore) exceeds max width does not seem to handle wide chars correctly (seems to count them as 4 instead of 2?)
  -cursor up/down should work with display lines
-add a visual anchor for the box label so you know you can add one easily
-fix
  -- TODO this should be r' not a FIX ME why is stuff even working???
  -- TODO there is a bug in cartRotationReflection_apply/cartRotationReflection_invert_apply where we don't actually apply the rotation but somehow this only works with that bug... Maybe the rotations cancel out?
-BUG still getting ? at double back midpoints (the real issue is you have double back midpoints)
-you somehow hit assert `Just (False, _) -> assert (not (pIsHandlerActive next_handler')) $ (refreshedHandler,refreshedLayersHandler) where`
  -from playing around with line arrows clikcing back and forth...
-move over to minimaple account?

-I tihnk it would be better for SEltDrawer to be created based on an OwlTree rather than return a function that takes an owlTree_addMiniOwlTree
-pregenerate unicode and figure out how to distribute using nix?
-BUG selecting severals items and moving takes forever :(
  -can't repro anymore? at least not  from opening a file, maybe it's due to a leak?
  -also selecting via folders and moving didn't seem to cause this slowdown
-BUG resizing unattached lines does not work
-BUG
  -now you get stuff like this, there's no arrow when there should be one, that's because you messed with determineSeparationForAttachment to not have the extra 1 offset
  -really there just a bunch of edge cases here that you need to deeal with based on arrow/now arrow and whether the attachment points are in 1 line or not etc :(
    ║╚═══════════════════════╝
    ║            ╚╗
    ║             v
    ║╔OwlPFWor═══════════════╗

-Line presets sholud be for start/end
-add a visual anchor for the box label so you know you can add one easily
  -but where to put it if there is already text?
-you should be able to select lines where there is text (this is in particular annoying when you try and move several things at once at you can't click on line label to move)
-do label position adjustment when adding midpoints
-high level bugs
  -BUG you sometimes hit this assert, need repro
    -Just (False, _) -> assert (not (pIsHandlerActive next_handler')) $ (refreshedHandler,refreshedLayersHandler) where
  -BUG foldgoatfn gets called 3 times for each event wtf 😭 (probably due to holdUniqDyns I guess)
    -you should fix cuz it makes debugging hard...
    -you got it down to 2 :O

DONE-YOU HAVE 2 WIP CHANGES RIGHT NOW OOPS 
  DONE-BOX CONSTRAINTS
    -broken because the constrainDeltaLBox function is applied to post preview state
    -you tried to fix this by setting box size instead, but you still have the same problem
    -you can fix by tracking pre-preview state and passing that in as well, but is there a better way?
      -I guess you could track the previous transform operation OR mouse position and add that back?
  IGNORE-FOLDER DRAG BASED ON X POSITION (broken because you need to handale recursive depth or something like that I'm actually not sure...)
    -see branch layerdragbyposition

DONE-BUG inverting boxes is broken (anchors move wrong corners)
  -I thought you disallowed inverted boxes? You definitely did, why is this OK again?
DONE-BUG if you undo a folder move from outside to inside another folder, it breaks, I think it's because the depth for the item inside the folder being moved is not being set correctly
DONE/IGNORE-figure out what to do to generate default term width file
  -also improve instructions, maybe make term width file a option rather than it's own binary!
DONE-BUG you somehow hit `assert nochildrenifaddingfolder`
  -drag folder somewhere and then undo
DONE-properyl return Preview_Commit actions where appropriate
  -BoxHandler creation, move
  -LineHandler creation, endpoint/midpoint/label move
DONE-make the welcome pop up scrollable
DONE-delete CartLine
IGNORE-introduce "cancelHandler" function
  -why would I want to do this?
  -gets called from GoatWidget when some higher order operation cancels or replaces the handler
    -must distinguish between cases where a handler is replaces vs when a new one gets returned by previous handler
  -can this be somehow combined with reset handler?
  -exsiting ways ah andler can be canceled
    -mousedrag_cancel (actually dosen't cancel, jsut resets the handler so no)
    -you get lazy sometimes and just return no handler such that Goat regenerates the handler from selsection and this will now become a cancel
    -keyboard escape
    -click outside of handler capture area which causes goat to regenrate a new selection handler
    -pReseteHandler may clear the handler
      -is this what happens when a you delete an object in the layers?


:: Preview Operations Mini Refactor 8/2023
DONE-get rid of controllerswithid->llama->controllerswithid circular nonsense
  DONE-in particular, get rid of Llama->ControllersWithId, we work with Llama's directly now!
  DONE-remove PFCmd stuff from WSEevent
    -this is hard because of usage of lastState in OwlWorkspace. We need a notion of lastState which is state before any preview is applied (or better just the local preview)
      -may you can unapply the local preview to generate last state, requires assumption that local preview can always be unapplied which I'm not sure is true or not...
        -actually just carry around state before any previews applied? But will that break any assupmtions? Maybe we really just want only the local preview unapplied
      -or does this lastState stuff even matter anymore if you use set operations
        -I don't think it does, but for cerating new elts you need to call owlPFState_nextId to get the id, but we will have a state-independent uuid generation function now?
DONE-goat refactor warmup
  DONE-get rid of GoatCmdTempOutput
  DONE-do goatCmd endo refactor, separate routines for each GoatCmd
    IGNORE-after moving everything to endo style, you'll need to find a new home for 
      `goatState = goatState' { _goatState_unbrokenInput = "" }`
      -probably add some common routine to every endo fn I guess
  DONE-BUG selecting does not auto expand folders
  DONE-BUG hiding layers causes crash because broadphase isn't being updated
  DONE-split hoa_layers into 2 separate things
  DONE-add processHandlerOutput :: PotatoHandlerOutput -> GoatState -> GoatState
  DONE-refactor out goat update routines in foldGoatFn
    DONE-set selection
    DONE-set pan
    DONE-update layers state
    DONE-apply event
    DONE-render / render selection
    DONE-update selection
    DONE-set handler from selection
    DONE-refresh Handler
      -this is tricky because we this may cause the handler to send a cancel preview operation which would normally have us refreshing the handler again
      -I think you want to reset the handler sooner in the flow (before set handler from selection)
  IGNORE-refactor out layers handler in foldGoatFn
  DONE-switch HOA_DEPRECATED_PFEvent to HOA_Preview
    -remember to do Preview_Commit as needed 
      -or instead we do the thing where the next Preview_Start commits the last preview?
        -no I think you want explicit commits
        -actually I think you don't want explicit commits, or make it optional. It's kind of awkward to cancel in some places e.g. keyboard movement
          -we could cancel when they leave the handler which would require an additional cancel handler function and would not capture cases where user just went AFK with the handler after making some keyboard changes
  DONE-refactor PotatoHandlerOutput to be mutually exclusive
DONE-create preview list (I guess you can just put it in PFWorkspace for now...)
  -Map UserKey (Maybe LLama)
    -this isn't quite right, because the previews are applied/unapplied in order. so it should probably just be [(UserKey, Llama)]
  -question should we store local preview separately and always apply it last/first?
DONE-assert when starting a new handler that there is no local preview action
DONE-handler -> preview -> goat -> pfworkspace -> unapply old previews by that user -> create new state/preview list
IGNORE-pRefreshHandler needs to return an output action and the only possible output is HOA_Preview PreviewCancel (or HOA_Nothing for the layers handler)
  -actually maybe it's not unreasonable just to cancel the preview always
DONE-implement PO_CommitAndStart
IGNORE-do PO_Commit on mouse up in all the handlers
DONE-I think you need switching handlers to do a commit as not all handlers have a reliable point to commit
IGNORE-replace pIsHandlerActive with just checking if there is a live preview opeartion or not
  -no I think you need/want both, there are some handlers that are active but don't do Previews
  -maybe default implementation of pIsHandlerActive could check for a live preview? Can/should previews be associated with handlers for error checking purposes?
    -maybe give handlers an Id
IGNORE-I think you may want explicit onReplaceHandler operation. Not every handler wants to commit their changes when they get replaced
  -specifically, there's a convert to text box preview operation when you enter text mode on a non-text box, we want a preview to convert it to a text box, and if this handler gets replaced, we don't want to commit the change
  -perhaps you can just have a commitOnReplace :: Bool function, that's probably easiest


:: TODO 7/2023

DONE-BUG toggle expand/hide/lock in layers should not alter selection (right now it deselects)
DONE-tests
  DONE-endSetFocusedArea test, start renamin,g change focus, ensure rename happened
  DONE-auto expand folders after selection
  DONE-hide/lock layers and check selection works as expected
DONE-warning cleanup
DONE-figure out why scrolling in file explorer is hecka broken
  -I don't think there's anything wrong with code, scrolling freezes input for some reason in vty on mac terminal :|
IGNORE/DONE?-make sure it's not possible to open up a pop up while mouse dragging (or you will break mouse drag pane2 stuff again)
  -it's definitely possible to do that but nothing seemed to break???
  DONE-auto expand folder after dragging into it
  DONE-do proper folder position
DONE-update README.md with usage instructions
DONE-move over to minimaple account
DONE-cursor rendering is broke if there are multiple new lines
DONE-BUG can't enter multiple new lines into text box
  -seems to be a bug in TextZipper
DONE-BUG click on eol in text box is kind of broken in general[]
  -doesn't always take you to the end
  -sometimes takes you to begining of next line (it happened to me when you click the same place past EOL twice in a row)
    -this is probably because there is a bug with how you handle the cursor/selected character 
DONE-BUG cilcking on auto wrapped lines after the first one does not work
DONE-gotolineposition broken when word is wrapped to next line (still does it based on character level wrapping for some reason)
DONE-disable or fix circleci
DONE-BUG index out of bounds somwhere with wide chars (pretty sure it's in ttvty but may be in zipper)
DONE-add switch start/end button to line params?
DONE/FAIL-make tutorial file, I think you have everythingy ou need now!!!
DONE-finish line endpoint unit tests
DONE-get rid of textbox tools
DONEish-bxoes should be text boxes by default, remove the text tool
  -click selected non text box will convert it to text box and clear all text
    -it's alittle weird because you singel click text box right now to end text
  -toggling text box will behave as before (preserving text)
DONE-tutorial...
DONE-draggable anchors
  DONE-change this so it tracks box we were attached to at the beggining for the duration of the AutoLineEndPointHandler drag  such that you can detach and reattach
  DONE-you can now have lines coming from the same side of the box so you need to handle the both lines in same direction case
  DONE-BUG some of the anchors don't match with where the line gets drawn to
    -I think basically you need to rewrite a bunch of the linedrawer methods which assumed anchors started from the middle? ug?
    DONE-project ratio calculation seems to project to a point that's off by 1 sometimes
      -might be due to offset border nonsense?
  DONE-break ties use mpreval in projectAttach
DONE-flip arrow button
IGNORE-probbaly remove text ICU dependency :\
DONE-BUG
  -this is due to (hsep, vsep) = determineSeparationForAttachment (lbx1, (1,1,1,1)) (lbx2, (1,1,1,1))
              ╔═════════════╗
              ║╔GoatState═══║═══════════╗
              ║║            ║           ║
              ║║            ║           ║
              ║║            ║           ║
              ║║            ║           ║
              ║╚════════════║═══════════╝
              ║            ║║
              ║            ║v
              ║╔OwlPFWorksp║ce══════════╗
              ║║           ║            ║
              ║║           ║            ║
              ║║           ║            ║
              ║║           ║            ║
              ║╚═══════════║════════════╝
              ╚════════════╝
DONE-strip everything and upload to hackage
DONE-switch to cabal?
  -prob need to learn nix first ;__;
DONE/IGNORE-update ChangeLog.md
DONE-empty canvas should have default size of 100x100 not 1x1
DONE-proper command line parsing with --help option
DONE-add version # to serialization (how?)
DONE/IGNORE-add beta title
DONE-probably want pop up error when you try and open a file that is invalid
DONE-add versioning to serialized file
DONE-properly disable grapheme clusters
  DONE-disable unicode wide chars too ;__;
  DONE-prob best to do this at goat keyboard input processing level
    -something like makeInputLessFun :: KeyboardInput -> KeyboardInput
  DONE-hook up configuration
DONE-selection rendering of widechars is incorrect
DONE-wide char rendering
  -prob best to  have RenderedCanvasRegion work with WideChar
  -broadphase needs to use expanded unicode boxes rather than logical boxes
DONE-uses ~/.tinytools/ to store unicode width table
DONE-pass cache in through PotatoHandlerInput and use in Select (you could use in Line too)
DONE-update cache to not be intrusive, include elt in the cache
DONE-should be allowed to click on label directly from BoxTextHandler (you need to pass on input to underlying BoxHandler
DONE-BUG fix line bugs
  DONE-       ^
              ║
              ║
              ║
              ║
              ║             ^
              ╚═════════════╝-----*
                      |cool       |
                      |features!  |
                      *-----------*

                            ╔═══════════════════════════╗
                            ║this is a placeholder for  ║
                            ║the actualy tutorial       ║
                            ║                           ║
                            ║                           ║
                            ║                           ║
                            ║                           ║
                            ╚═══════════════════════════╝
  DONE-                     ╔═══════════════════════════╗
                            ║this is a placeholder for  ║
                            ║the actualy tutorial       ║
                            ║                           ║
                            ║                           ║
                            ║                           ║
                            ║                           ║
                            ╚═══════════════════════════╝
              ╔═══════════════════════════╗
              ║*-----------*
              ║|cool       |
              ║|features!  |
              ║*-----------*
              ║      ^
              ╚══════╝
  DONE-                       ╔═══════════╗
                              ║           v
                            ╔═║═════════════════════════╗
                            ║t║is is a placeholder for  ║
                            ║t║e actualy tutorial       ║
                            ║ ║                         ║
                            ║ ║                         ║
                            ║ ║                         ║
                            ║ ║                         ║
                            ╚═║═════════════════════════╝
                              ║
           *-----------*      ║
           |cool       |      ║
           |features!  |      ║
           *-----------*      ║
                 ^            ║
                 ╚════════════╝
  DONE-BUG start and end anchors behave differently when attaching and aren't attaching to correct anchor points
    -fix with cartRotationReflection_apply_lBox
  IGNORE-BUG some bot to bot cases are broken
  IGNORE-BUG attach offset seems to be not used correctly in some configurations :(
  DONE-BUG
           ╔══════════╗
           ║@@@@@@@@@@║
          ╔║@@@@@@@@@@║══════════╗
          ║║@@@@@@@@@@║          v
          ║╚══════════╝══════════════════════╗
          ║     ^     ║@@@@@@@@@@@@@@@@@@@@@@║
          ║     ║     ║@@@@@@@@@@@@@@@@@@@@@@║
          ║     ║     ║@@@@@@@@@@@@@@@@@@@@@@║
          ║     ║     ╚══════════════════════╝
          ╚═════╝
  IGNORE/DONE?-attach offset of 0 for AL ANY still needs to render the arrow head


:: CUT Line
-enable/disable widechar/grapheme cluster configs
-charwidth needs to be passed in rather than rely on global
-consider using LineAnchorsForRender/sAutoLine_to_lineAnchorsForRenderList  for cache instead
-LineDrawer.hs midpoint anchor rendering will double back on itself, you need to force the attach direction to change based on neighbor rather than use AL_ANY
-BUG figure out what's going on with cache updated render bugs...
-finish substract lbox (-- TODO crop away mleft/mright from mtop'/mbot')
-file stuff
  -maybe highlight relevant files instead of * in file explorer
    -or just don't show anything that's not relevant...
  -UTs
    -popupSaveBeforeExit
    -popupOpenWindow
    -doubleClick
    DONE-waitForSecondAfterFirst (move to reflex-potatoes)
  DONE-add double click support to file explorer
    -need to hook into IO time stuff
-BUG render box for lines with labels might be off by 1 sometimes, if you drag you will leavea trail of letters from the line label sometimes maybe
-fix PanSpec...
-FEATURE add line labels
  -adding midpoints when line labels exist need to be smarter about reposition line labels
  -add line label anchor in text edit mode so that you can easily reposition it
  -introduce notion of "selected midpoint/linelabel handler" so that they can be deleted
  -bonus, cache line labels
-folder stuff
  -BUG/FEATURE when you select a folder and it auto selects children, you can't click and drag the children
  -empty folders should not be expandable? (set to expanded by default)
  -BUG click release on lock/hide/collapse on selected element should not deselect
  -you might want to consider disallowing selection of locked stuff from folders (directly NOT ok, via parents OK)
  -maybe consider doing shift select and ctrl select (to replaec current shift select behavior)
    -not sure what happens when you shift select past a folder
  DONE-BUG after renaming folder, clicking on canvas pane does not finalize the folder rename action until you click back on the layers pane
    -you need some kind of click off pane reset type action to handler
      -can you tie this into graceful handling of bad mouse states?
  DONE-make new elts get created inside selected folder rather than above it?
-proper configurable theme in Main.hs
-FEATURE attach point repositioning
-TESTING check for leaks again
-FEATURE info/statusbar/output area (right side?)
-TESTS TO ADD
  -create box, turn to text box, add some text, turn to regular box
  -drag parent folder into a child folder and ensure it does not work
  -create folder with children, select folder, attempt to drag via children (doesn't work right now)
  -rename in layers, change focus to canvas, ensure layers rename took effect
-figure out how to change folders into groups for auto-pathing group support
  -is it just a folder setting?
-add mouse hover support (for when you do web port)
-maybe make styles references instead of stored per elt
-FEATURE options menu
  -could you do style defaults in this menu too?
  -like ideally following the same model you did in Params.hs....
-FEATURE add anchor repositioning dragging
  -add anchor positioning var first
  -create interface for dragging anchors in line handler
  -maybe design way to directly attach at offset position?
    -line anchors for render could highlight the entire box and flash the center point?
      -you probably want options to disable this stuff
-ttvty
  DONE/IGNORE-add box border toggle
  -(line style) do easy disabling of start/end (stretch)
    [x] start | [x] end    (the one being modified is highlighted)
-insert vs overwrite option for freeform text
  -you need some kind of options object to go along side of PotatoDefaultParameters



:: DONE
DONE-BUG open double cilkc not work anymore :()
DONE-open tutorial file by defaultcd
DONE-get rid of info box for now
DONE-middle mouse cilck to pan
DONE-don't show RID on layers
DONE-layers should show a little icon indicating what kind of element is there
  -try emoji?
DONE-layers should allow punctuation characters
DONE-BUG boxes past a certain point don't show attachments
  -- TODO change this to be in canvas space _potatoHandlerInput_screenRegion = LBox 0 _goatState_screenRegion
DONE-BUG need to do size validation on params canvas size stuff
DONE-BUG AutoLineLabelMoverHandler sometimes projects handle with an offset??? Only on Z shaped stuff??
  -you have a test case to catch this already
  -I think there's a maybe separate issue that is not related to midpoints after you adde creation stuff?
DONE-after clicking on line label, cursor should go to end
DONE-erase empty labels
DONE-BUG rendering first character in line label is wrong
DONE/IGNORE-erase all text to delete line label
DONE-remember to adjust _sAutoLine_labels when deleting midpoints
DONE-if down and up on line manipulator (text portion and not the anchor portion), should be able to edit
DONE-BUG click to edit text inside SAutoLineLabelHandler not working
DONE-SAutoLine -> SAutoLineLabel -> XY
DONE-mouse down up on line label takes you to line label handler
DONE-generate text box for line label handler (don't wrap for now)
  -offset anchor by 1 in line label handler
DONE-rendering
  -must adjust bounding box to include line labels UGGG
-file stuff
  DONE-add scroll bar to fileexplorer
  DONE-pageup/down support to filexplorer
  DONE-new file button
  DONE-open file button
  DONE-make alert on unsaved changes generic and save popupmanager
    -????
  DONE-you must wait for finalSaveEv before actually doing something in case the save fails
    -maybe redesign SaveBeforeACtion lesigh
    -you can have something like waitForSecondAfterFirst :: Event t a -> Event t b -> m (Event t (a, b))
  DONE-ctrl-o to open (should prompt for save first)
  DONE-ctrl-n for new file (should prompt for save first)
  DONE-open file dialog
  DONE-auto focus on filename area?
  DONE-up/down arrow works regardless of focus in explorer window
  DONE-apply styling
  DONE-add highlight on click
  DONE-auto add file extension on saving?? (maybe have check box to disable? or maybe disables if user sets their own extension)
  DONE/IGNORE-grey out invalid files extensions
  DONE-sort files in explorer
  DONE-auto add extension on save
  DONE-clicking on file with valid extension populates the filename bar
-tests
  DONE-very basic midpoint test
  DONE-add cancel with no movement test for box and line handler
  DONE-add test to make sure cache is actually being used
  DONE-test where you delete midpoint by dragging to adjacent midpoint that is adjacent to another mid/endpoint and then drag to tha adjacent point
  DONE-setMarker should be analogous to "it" in documenting test cases
  DONE-attach line to object, move object delete that object, make sure line is in expected place, modify line again
  DONE-create 2 fully attached lines, select them both, ensure not possible to move


:: MULTI POINT LINE AND LABEL SPEC
DONE-midpoints
  DONE-rendered in segments
  DONE-midpoints treated as ANY attachments
DONE-ANY attachment style
  -pass in neighbors, and direction determined by position of neighbor
  -process from left to right, disallow double backing in same direction
DONE-click once to select line
  DONE-click + drag end/midpoint to manipulate
  DONE-click + drag text label to enter modify mode
    -refactor modify stuff out of BoxText and BoxLabel (why didn't you do this correctly the first time...)
  DONE-click + release to create new text label
    -erase all text to destroy text label


:: DONE 12/2022


DONE-BUG midpoints rendered as ?
  DONE-BUG starting dragging from box anchor, attachment stuff for box you are dragging goes away
  DONE-line anchors handles should render on top of attachment points and not on the edge of the box
  DONE-AL_ANY needs to be a single point and not a box with 4 sides...
    -i think this is fixed if you set attachOffset to 0...
    -BUG I think this is causing unattached lines to be offset by 1 from where they should be...
DONE-params
  DONE-default for line in params should be both instead of start
  DONE/IGNORE-line stuff should have aligned spacing to make it easier to click on where the change is
  DONE-highlight squares that can be modified
  DONE-BUG rename layers, click off, then click back on, then modify params, click off to finalize, it will crash
DONE-BUG cache isn't being set
DONE-TESTING allow foldGoatFn to be tested directyl, get rid of the reflex indirected tests....
  -add proper potatoShow for SuperOwl/OwlItem
  -add way to label individual tests
  -improve labeling of each verify step
DONE-display filename somewhere with * if not saved
  -on start, it should pop stack, on exit it should pop stack
DONE-delete layer scrolling support from GoatWidget. I can't remember why I did this anymore
IGNORE-disable selection highlight in some modes????
DONE-no MDI file stuff
  DONE-CLI open file
    DONE-opens file, sets directory to file's root dir
  DONE-no open file
    DONE-sets directory to home dir
DONE-figure out if paste is done via repeated inputs or actually via paste event
  -repeated inputs lol
DONE-BUG you can stil drag folder into itself which causes crash wtf I thought I fixed thi
IGNORE/DONE-refactor
  -refactor SEltMethods/getDrawer stuff
    -factor in RenderCache into refactor somehow?? RenderCache is good not just for rendering....
  -switch OwlPFCManipulate over to Llama
  -consider doing some sort of generic cache method
    -options
      -generic call to `updateCache` method that gets called before each update operation in Goat as appropriate
      -wrap handler in some sort of monad so you can just doUpdateCache
  -consider adding available Attachments to PotatoHandlerInput
    -why?
DONE-BUG selecting two box and gonig line tool causes crash
DONE-BUG selecting something and pressing v removes the handler???
DONE-BUG create two boxes, copy, paste, delete, observer crash 😱
DONE-BUG changing from text box to no text box crashes
DONE-reset layer handler after `next_handler = case _goatCmdTempOutput_pFEvent goatCmdTempOutput of`
DONE-fix mouse cancel stuff for autline
DONE-finish midpoint stuf
DONE-best guess for ANY attach ends on which attach type to convert to
DONE-file explorer
  DONE-getting filename and last folder confused
  DONE-add quit button somewhere?
  DONE-initialize app with correct folder
  DONE-prompt to save if not saved
    -would be nice if we had potatooutput state thingy
  DONE-typeable file path bar
  DONE-double focus between filename and folder
  DONE-fix h scrolling in filename input
  DONE-ctrl-s to save
IGNORE-multi node lines
  DONE-research how lucidchart does it? (they use edge draggers instead of corners (avoids doubling back issue) but this won't look good in vty)
  DONE/IGNORE-you really need to design+determine all line types first
  IGNORE-cartline needs a SElt type
  DONE-decide how to combine Line and CartLine
    -click + drag produces reuglar line
    -click release in same spot takes you to CartLine
  DONE-may as well do attachments while you're at it
    -same as regular line except last points auto track to their attaching points, may create some un-editable joints
    -how to detach?
    -how to attach during creation?
      -click on attachment point... attaches
      -ctrl click does not attach
DONE-line style
  DONE-use different handler color for line start/end so you can tell the diff between the 2
  DONE-implement line start/end style rendering
DONE-line picker start/end
  DONE-finish implement
  DONE-UI (complete start / end)
    [x] start | [x] end    (the one being modified is highlighted)
    custom | preset
    ....
DONE-preset interface for choosing line ends
  DONE-easy way to turn on/off line ends for both sides
DONE-attachment stuff
  DONE-use better function to determine if you clicked on lines (you can do this now)
    -this should have access to the RenderCache/OwlTree
  DONE-attachment handle rendering
    -just having line handler selected should not render attachment handles (only when dragging handle end)
    DONE-having Line tool selected should highlight attachment points so you can create a line and attach right away
      DONE-TODO I think you want to make it so selecting tool changes the handler.. You'll need to update each handler to handle empty (non selection) states though D:
  DONE-move no longer makes sense on attached lines, find a way to disable it
    -or don't disable it...
    -remove it from Box select handler selection?
  DONE-lines can't be attached on first drag
  DONE?-BUG drag off attachment logic is wrong for Line handler
    DONE-just do the controller refactor!! D:
IGNORE-BUG attached lines don't render when you drag in some directions
  -I think this is due to an update order, i.e. the AABB is computed from the old line's AABB rather than the new line's AABB (it needs to be both!)
  -NO this was also probbaly due to out of date cache or something idk wtf???
  -well it's magically fixed now W/E
DONE-Select box + attached lines
  DONE-kind of weird that fully attached lines don't move with select box... I guess partially attached lines do?
  DONE-selecting multiple fully attached lines should not allow moving?
  DONE-selecting fully attached line and something that can be moved.. I guess the box should draw around just the stuff that can be moved
DONE-after DELETING object line is attached to, line should prob reset its endpoint position to where it was attached
  -prob makes most sense to scan for all objects
    -this might have some weird edge cases in multi user mode but whatever?
  -prob better scan for all attached stuff in PFWorkspace then
  -was I suppose to put the attachment map inside of the workspace D:
DONE-BUG you can reset handler by pasting or selecting on layers and it doesn't reset the tool back to select
  -I guess you also need handler -> set tool?
DONE?-BUG line ends attach at wrong places (off by one)
  -this happens in even width one cases
DONE-select box boundary uses origin line endpoints rather than attached points
  -need to set box width to infinite
DONE-BUG attach lines sometimes don't render (this is a broadphase box-to-rerender issue probbably)
DONE-when overflowing in boxlabel it will go to next line when it should keep going to the right (and still be invisible)
DONE??-BUG manipulators sometimes don't respect screen pan
  -repro is pan and then select via layers and the selection will use the old pan setting
  -this does not happen if you pan and select via canvases and fixes the pan setting
DONE-BUG multiselect with text box in selection and then clicking on text box will cause it to try and go into text edit mode and crash becaues it expects only one text box to be there
  -you can either disable this or do a second collision to determine which text box you clicked on
DONE-BUG box styles are "contagious" if you multi drag a box, it's style will apply to everything in that selection group...
  -this happens because params is triggering (for both ssytle and linestyle) when you click and drag on canvas side
DONE-BUG keyboard hotkey to change tools visually changes tool-s but you are still in select mode...
DONE-backspace should delete too
DONE-after DELETING object line is attached to, line does not get rerendered
DONE-add a regenerateAttachmentMap and verifyAttachmentMap UT
  FIXED-it's crashing :(
FIXED?-BUG doing a box select just to the left/top of a box will select it when it shouldn't
DONE-when drag selecting, box should auto resize to +1 so you don't have invisible drag box
IGNORE-I think you need some kind of cache monad
DONE-need another area for tool options
DONE-BUG
       ╔══╔═╗╗
       v  ║@║║
     ╔═══╗╚═╝║
     ║@@@║ ^ ║
     ║@@@║ ╚═╝
     ║@@@║
     ╚═══╝

DONE-BUG


        ╔══╗
        ║ ╔═╗
        ╚>║@║
     ╔═══╗╚═╝
     ║@@@║ ║
     ║@@@║<╝
     ║@@@║
     ╚═══╝

DONE-BUG


          ╔═╗
          ║@║<╗
     ╔═══╗╚═╝ ║
     ║@@@║    ║
     ║@@@║    ║
     ║@@@║    ║
     ╚═══╝    ║
       ╚══════╝

DONE-BUG

    ╔══════╗
    ║      v
    ║     ╔═╗
    ║     ║@║
    ║╔═══╗╚═╝
    ║║@@@║
    ╚║@@@║
     ║@@@║
     ╚═══╝

DONE-BUG setting line ends style seems to be broken again
  -I think this might be because of params mouse focus issue again...
  -no it's because you aren't using line style in the new line render stuff doh
DONE-BUG clicking from changed text entry box in Params  to Canvas causes changes not to apply reset :(
  -this happens for 2 reasons
    -1 the params widget may get closed on if you change selection
    -2 unfocus event never happens because input does not get passed into left widget
DONE-BUG
                      ╔═════╗
                      ║     v
                      ║   ╔═══╗
                      ║   ║@@@║            ╔═══╗
                      ║   ║@@@║<═══════════║@@@║════════╗
                      ║   ║@@@║          ╔>║@@@║        ║
             ╔═══╗    ║   ╚═══╝          ║ ║@@@║        ║
             ║@@@║    ║                  ║ ╚═══╝        ║
             ║@@@║    ║                  ║              ║
             ║@@@║    ║                  ║              ║
             ╚═══╝    ║                  ║              ║
               ^      ║           ╔══════║════════════╗ ║
               ╚══════╝           ║@@@@@@║@@@@@@@@@@@@║ ║
                                  ║@@@@@@║@@@@@@@@@@@@║<╝
                                  ║@@@@@@║@@@@@@@@@@@@║
                                  ╚══════║════════════╝
                                         ║  ^
                                         ╚══╝
DONE-BUG
                               ║
                               ║
                               ║                           ╔═══╗
                               ║                           ║@@@║
                               ╚══════════════════════════>║@@@║
                                                           ║@@@║
                                                           ╚═══╝
                  ╔══════════════════════════════════════════╝
                  d
                ╔═══╗
                ║@@@║
                ║@@@║
                ║@@@║
                ╚═══╝
ALREADY DONE-click on file in file explorer should populate it as filename IF file extension is correct
DONE-BUG the render box is still too small by 1 to the bottom/right in the <- -> case D:
DONE-BUG rotation to up/down creates off by 1 offsetting errors D:
DONE-BUG line handle positions need to be updated if attached
DONE-convert simple line to auto connect to attachments
  DONE-attachment rendering when adding / editing lines...
  DONE-if attaching to box X then change highlight on all box X stuff
  DONE-auto attach solver
IGNORE??-BUG hitting assert
  selectionToSuperOwl (CanvasSelection selection) = assert (Seq.length selection == 1) $ Seq.index selection 0
  repro (select a bunch of stuff and try and shift click a bunch on linux???)
  DONE-dump state/tree
DONE????-BUG selecting elts causes folders collapse sometimes for some reason
DONE-BUG enter rename when clicking on show hied collapse stuff
DONE-BUG save failure still registers as a good save
DONE/FAIL-ctrl shift q to force quit
DONE-add state into render methods fack
DONE-prompt save on exit
  DONE-proper save state handling inside of goat...
DONE-different color highlighting on render handles
DONE-allow deselect in layers by clicking where there are no items
DONE-pull settings from home directory
  -what does this do on windows?
DONE-locked/hidden stuff
  DONE-BUG, right now if you select via folders, do and operation, unselect, it will allow you to reselect locked/hidden stuff for some reason 😱
    -this must be happening because something is being set incorrectly inside of layerMetaMap??
  DONE-because folders allows selecting locked/hidden stuff, you need to remove this stuff before generating handler from selection
    DONE-you also need to remove locked/hidden stuff into selection that gets passed into handlers
  DONE-pipe through ControllerMeta into GoatWidgetConfig such that you can instantiate tests with various lock/hidden/collapse states
  DONE-omit locked stuff from selection set somehow
    DONE-inside of handler and drag+select case in GoatWidget
      -no seleciton of locked or hidden stuff
      -modify selectMagic
    DONE-direct selection via layers
      -OK to allow for selecting locked items for dragging purposes but not for manipulation? (This goes for hidden as well)
    DONE-UTs for selection handler and drag+select
    DONE-UTs for selection via layers
  DONE-omit hidden layers in render function
    -(don't forget to do it for selection rendering too or does it not matter becaues you shouldn't be able to select hidden stuff??)
  DONE-test hidden layer rendering
    -hide via folder
    IGNORE-can't see after trying (and failing) to select hidden
    IGNORE-locking only does not hide
DONE-split up GoatWidget into Goat and GoatWidget
  -move GoatWidget into Reflex folder
DONE-UT ControllerMeta loading
  -ugh
DONE-finish SetPotatoDefaultParams...
  DONE-use these settings when creating new elts inside of Handler
  DONE-read these settings in Params when nothing is selected
  DONE-set these settings in Params when nothing is selected
  DONE-set _setPotatoDefaultParameters_sBoxType correctly in Params
  DONE-you broke TextAlignment params update somehow (clicking to change text alignment does not update the choice)
  DONE-linestyle default setting does not work
DONE-BUG radiolist width counting function is wrong (I think you forgot spaces between boxes)
DONE-MINOR box title allows news lines (they just get hidden, forbid new lines in box title entry method)
DONE-folder renaming doesn't allow spaces
DONE-BUG paste does not work for folders
  -WSEAddRelative needs to use OwlMiniTree
DONE-add line ending params
DONE-connect height correctly in params?
DONE-fix SBoxType params
DONE-[graceful handling of bad mouse states] probably add hack to ignore inputs that didn't come from the same source until it's corrected (or force a cancel)
DONE-I think you broke folder depth dots (remember it's only for when you drag)
DONE-BUG owlTree_addMiniOwlTree order is incorrect for top level elts
DONE-BUG if elt is drag onto its own spot in list, it crashes
  IGNORE-you can probably fix this by preventing dragging back onto same elt (i.e. no move)
    -this breaks multi-move though...
  DONE-add UT for this
DONE-widgetify left panel
DONE-fix dynamic heights in left panel
DONE-pass out dynamic height in params
DONE-BUG pane2 has broken save/savas and generally stuff that opens up a popup due to popup overriding mouse capture
  -fix by activating on mouse up instead of down...
DONE-text area
DONE-ui work
  DONE-rework tools menu to be more readable
    DONE-add tools for text area and maybe multiline
  -resize left pane to be correct
  -add little indicator indicating you can click to enable box labels?
  DONE-add hotkeys to MOTD?
DONE-hotkeys for choosing tools are broken (every other hotkey is broken...)
DONE-textarea click to select enters textarea handler
  DONE-still broken after dragging??? whyy
  DONE-also cursor is not getting psased in correctly (need to handle on mouse up)
DONE-BUG selecting folders does not create select boxes
  -need to use converted selection in select handler?
    -or do I want to make converted selection available via PotatoHandlerInput
DONE-must click to focus on canvas (after having focused on layers) for input to registerv
FAIL/IGNORE-add State to PotatoReader
DONE-highlight parents with selected children gray (repuprose INHERISTSELECET)
DONE-layers rename handler renderer
DONE-must click to focus on canvas (after having focused on layers) for input to register
DONE-click on layer  and drag to canvas area causes freeze
  -generally speaking clicking and dragging to other panes is kind of broken
DONE-BUG selecting folders does not create select boxes
  -need to use converted selection in select handler?
    -or do I want to make converted selection available via PotatoHandlerInput
DONE-box handler drag/move should probably check if you actually clicked on a elt before letting you drag
  -right now you will drag if you click on nothing if it's inside the box
DONE-box labels


-EXTRA BONUS TODO
  -break up foldgoatfn to clean up stuff, in particular, so you can have dedicated file load / initialization code path
  -attachments
  -text box should indicate overflow when in text entry bode
  DONE-box labels
  -glyph widget
  -consider refactoring layers handler
  -consider refactoring handlers to output commands so you can make everything even more scriptable
  -would be nice to select line anchors and then have keyboard input on the selected anchor
  -"convert to text area" option
  -right cilck menus
  -serialize action stack
  -actual MDI
    -ctrl-t for new tab
    -ctrl-w for close tabe
    -ctrl-{/} for tab left/right
  -(requires [TextZipper selection]) click to rename folders should really select all existing text
-BONUS TODO (TBH you need to do this to make the product useable)
  -do proper theming dark/light
    -theming/design pass
  -keyboard input
    DONE-box handler
    -for line handler it should operate on the last anchor selected
  -live selection preview
  -handlerrenderoutput should be bale to do grey background for text boxes and stuff
  -multi-line handler
  -toggle box to textbox to freeform
    -this operation can not be reversed popup :O
  -user settings object in vty
  -MDI refactor
  -box label text alignment parameters
  DONE-freeform
  DONE-layer show/hide
    -test impl
    -refine UI
    -probably easiest to do inside of updateCanvas
  DONE/IGNORE-save, save as, open, print dialogs
    -you want a settings widget to track which is current directory/file
  DONE-selection box
  DONE-separate selection rendering
DONE-still getting same source assert when dragging to/from layers/canvas
  DONE-(write Ut for this)
  DONE-I think you just need to switch layout stuff to use pane2
DONE-add sorting to BroadPhase somehow...
  -fix select order
  -ok you didn't actually fix render order...
DONE/IGNORE-color config object
  -entry box valid
  -entry box entering
  -entry box grayed
  -background
  -text
  -etc

-maybe make styles references instead of stored per elt
-make a set of Goat verifiers for testing in vty UTs
-glpyh selector-search widget
  -at least basic version which has a tab listing standard ASCII stuff
  -and then tab for all the best emojis :O
  -prob take symbol list + lookup table for searching
  -save recently used on exit
-BoxText
  DONE-add alignment to text zipper
  -add BoxTitle
    -maybe left/right/center text
    -add padding to BoxText
  -text box type should highlight not cover
  -text box should indicate overflow when in text entry mode
-DisplayLineConfig
  -Wrap Words
  -Wrap Characters
  -Overflow
  -Clip
-do multiline stuff :D
-switch to endo style folding in goatwidget so you don't need to use ignoreMouseUnlessFocused
-hook up unicode width fn
  -add hook for it in renderer
    -erhh, this may need some refactoring...
  -maybe need it in broadphase too? Prob not
-add screen size support to GoatWidget (for rendering OOB)
-menu bar?
  -open/save/load/quit/about
    -maybe don't worry about submenus for now 😱
  -you need to use zipper if you want sub menus
-new vty window stuff
  -MVP is some floating windows that modify something in base window
-consider adding second cursor type, "v" and "a" equivalent (probably ignore)
-handlers should render as background fill color
  -and to be even more awesome, you could render on top for when moving things is background I guess
-more efficient replacement for doesSelectionContainREltId
-need narrow phase selection methods, i.e. can't just do it using boxes
  -make sure to test :)
-make flowchart diagram of handler setting rules
  -non-canvas event (does this reset?)
  -external event (calls new reset function)
  -capture + active + changes
  -(capture/no capture) + not active + changes
  -no capture (must not be active)
  -returns Nothing handler
-tests
  -undo/redo test
  -more params tests
  -undo redo of text
    -you should really set up a 1000 undo redo sorta thing again
-rendering
  DONE-get rid of BroadPhaseState (carry changes around separately)
  DONE???-layer show/hide needs to return SEltLabelChanges
  -render based on screen not canvas
    -add _goatWidgetConfig_screen Dynamic t (Int,Int)
  -wrap initial render into helper function
  DONE/IGNORE-finish TODOs in updateCanvas
  DONE-rendering happens in GoatWidget??
    -or just make sure utility functions make it easy enough to do this outside of GoatWidget
-user defined SuperStyle presets
-if you are in BoxTextHandler mode and you have Text tool selected
  -then you click and release outside box, you will go back to boxtext handler
  -so I guess click release with any creation tool should deselect everything
  -or not, maybe this is ok...
-PFStateChangeFlag and have each PFState operation return a change flag as well
-SimpleSEltLine
  DONE-renderer
  -prototoype connections
-refactor for ordering service spec D:
-SPECS
  -params spec
  DONE-vty attr spec
  DONE-cartesian lines spec
  -group spec
    -group is prob just a folder that auto selects everything in said folder, you can subgroup but it just adds to the parent group effectively
    -you can select individuals group elts via layers
    -eventually implement focus mode
  -improved renderer spec
    -kd tree in broadphase I guess
  -connections spec
    -there may be missing/invalid connections, that's ok, just figure out a way to handle them
      -note, you must still be able to manipulate things with invalid connections so this could get messy
      -this way if you undo, the connection gets restored
  -insert mode text area spec
    -(how to handle resize??)
  -line intersection renderer
    -connects to lines, renders their line intersections
  -unicode spec
    -wide chars and graphene clusters
-layer bonus
  -write method to update layers incrementally when there are changes + when moving elements around in layers
    -write now you just inefficientlly call generateLayers every time...
  -layer drag select





:: TODO OLD ::
DONE-TINY TODO
  DONE-layers
    DONE-scrollbar/border to layers panel
      -change rendering based on scroll position
      -needs box indicating scroll position (v scroll bar I guess)
      -why does scrolling get managed by GoatWidget again?
    DONE-add rename support to layers
      -clicking away from layers panel (onto canvas or some other params) should cancel all layers interaction
    DONE-fix layer keyboard input capturing
    DONE-remove inherit selection highlight
    DONE-implement highlight drag drop (see nested layers below)
  DONE-add character to handlers and show highlighted text
  DONE-fix multi-select resize
  DONE-params crap
    DONE-fix focus in params ugh
    DONE-fix cursor highlight in params
  DONE-reverse render order
  DONE-add dividers in LHS to indicate where each UI region starts/ends
    -to be more awesome you could color each section differently...
  DONE-off canvas rendering??
    DONE-you need to change dynamic XY to event XY (and set initial state with an event) to avoid cyclic eval...
  DONE/IGNORE-block inverted squares (how to handle multi-select?)
    DONE-you broke it, fix pls
    DONE-write a UT for this
    DONE-this is hard because of "undo first" issue makes it difficult to recover state we are operating from
      -we can either invert the operation locally
      DONE-or we can modify the operation in PFWorkspace before popping onto action stack
  DONE/IGNORE-prep for testing
    DONE-get rid of PFWidgetCtx and use specific instances
    DONE-write harness for testing Params, Tools, etc...
DONE-7/2021 folder drag bugs
  DONE-can't reach last spot
  DONE-clamping seems to be wrong (need to +1)
  DONE-sibling computation puts you in wrong spot for some reason
  DONE-isundofriendly assert should only lump together stuff that has the same parent I think
  DONE-must deny selecting child of a selected object
    DONE-visually do shadow select to indicate this in layers so it's no confusing?
  DONE-add dots for dragging several layers so it's clear which folder you're going under
  DONE-do selection correction in GoatWidget rather than deny invalid selections
    -this is really sucky b/c if you have folder selected in layers then you can't select any of its children in main area
    -prob best way to fix is selecting parent includes all children in selection (locked and hidden stuff removed in main are aselection when we implement it)
      -when deselecting child, then this must deselect all selected parents recursively... hmm
  DONE-fix shift select parent case (must deselect selected children)
    -alternatively, you could do disjoint uninon with selected children.. whatever
  DONE-due to layers capturing input now, ctrl-z doesn't work after doing layer drag
    -delete key after selectinglayers sorta dosen't work either
  IGNORE-possible to make bad selections sometimes
  DONE-invert text box crashes still
  DONE-layers
    -no selection darkening
IGNORE-setup GHCI with hoogle :O http://dev.stephendiehl.com/hask/#ghci
DONE-BUG add sorting to selectMagic
DONE-BUG deleting folders does not delete children from canvas
  -Ok, now when you undo a delete folder it breaks :(
DONE-fix kb capture issue with layers
DONE-something is resetting _layersRenameHandler_zipper making renaming not work...
DONE-params MVP
  -toggle box border?
  -line style??
  -make a UT for setting params
IGNORE-layers test for the future
  -rename (when supported)
  -drag move collapsed folder
  -select non-contiguous elements and drag+move
DONE/IGNORE-rename Entry/newmemtest/Testing/Directory to DEPRECATED
IGNORE-layers
  DONE-consider doing tree structure for folders
  -layers (probably go with "more complicated select")
    -layers selection and actual selection are different
      -need a way to figure out parent
        -refactor layers to use tree structure
        -maintain an IntMap LayerEntry for non-visible LayerEntry as well
        -maintain IntMap REltId parent map
    -render selection in layers (add selected state to lentry)
    -PFEMove moves all children if folder was moved
      -addAllChildrenToSelection
    IGNORE-select folder start also selects folder end in layers
    -shift deselect test
    -add deselect support to LayersHandler ???
  -selectMagic should ignore locked elements
    -test it
  DONE-finish changesFromToggleHide
    -test it
DONE-nested layers
  DONE-dummy square at bottom
  DONE-highlight square indicating where you will drop to
    -need to offset LayerEntries to accomodate
  IGNORE-if mouse comes from above, highlight square enters into folder
  DONE-render handlers for layers
DONE??-do proper prevent inverted box in PFWorkspace
DONE-text zipper
  DONE-fix cursor pos on right alignment D: (easy way to fix is just to offset right by 1)
    -test
  IGNORE/DONE-text alignment UTs
  DONE😭-test with wide chars (in vty)
  DONE-put up PR :O

DONE-Owl TODO
  DONE-write validate function
  DONE-name functions in Owl to be consistent
  DONE-finish UTs for workspace
DONE-switch to use git submodules ffs
DONE/FAIL-setup linux :O???
IGNORE-delete manual install of haskell language server and use ghcup
IGNORE-consider moving layer position into REltIdMap directory
  -to do this efficiently you should track which elements actually had their position changed
  -or consider converting layers into a tree first blarg you need to do this sooner or later
    -except it's not clear how to sort elts if they are in a tree oh no
IGNORE/DONE??-queueVtyEventAndFire
IGNORE-create a PR for readDynamic
IGNORE/DONE-proposal for adding modifiable context object to VtyWidgetCtx
  -also takes config function to modify inside of pane or something

DONE-do keybord capture for params
  -relayout widgets so it's easy to pass returned values around or whatever
  IGNORE-maybe make your own Reader/DynWriter monad pls
DONE-update render area based on canvas size
DONE-a few more presets
IGNORE-redo cellInput pls
DONE-also create numInput
DONE-canvas size param (shows when nothing is selected)
  -pass event out of params widget
DONE-clicking onto canvas from params will trigger 2x goat events (1 to modify params due to focus change, and 1 canvas event)
  IGNORE-could resolve using Endo 😱(or just apply foldgoatfn several times..)
  DONE-ignoreMouseUnlessFocused
DONE-add reader to stack :O

DONE-figur out why I wrote the comment -- if shift is held down, ignore inputs
DONE-layout
  -make interface create layout with different tab events
  -cleanup exported stuff in layout
  DONE-consider making number of kids dynamic
  DONE-tests for vty layout
    -helper for reading Dynamics in test monad
DONE-params MVP old
  DONE-do layout improvement in vty D:
  DONE-scan params and look for same stuff
    -don't need to do anything with this yet, just put the methods in there
  DONE-add Dynamic Int output to params widget
  DONE-add Maybe to params widget so they don't get displayed if no such option exists
  DONE-fix tab widget recreation issue preventing you for tabbing accross style widget
    DONE-also need to reset cursor to start
  DONE-figure out how to do invis fill?
    -erase and hit escape or return 👍🏽
    -maybe just add an invis fill button
    -fill should be separate from rest of stuff in preset params

DONE/IGNORE-rethink keyboard input capture
  -params needs to capture keyboard input
  -params need to receiev events from glpyh selector
DONE/IGNORE-you probably want to build in input hierarchy
  -popup > menu > params etc > rest
  -make widget wrappers
  -ignore input when simulataneous with another event
  -some focus widgets??
  -find a place to put all these
DONE-render cursor position in text area (get cursor pos from displayLines)
DONE/IGNORE-single line text area
  -max width?
  -reset to start
  -colors
IGNORE-try vscode again :O https://github.com/haskell/haskell-language-server
DONE-try stacktrace omg
  $ ghc -O0 -rtsopts=all -prof -auto-all --make stacktrace.hs
  ./stacktrace +RTS -xc
DONE-add output to main to figure out how many ticks fire per event (and what frame # it's at)
DONE-do alignment offset in boxtext
DONE-click to focus on text handler should also pass in input so you can focus TZ cursor at spot where you clicked
  DONE-add a test for this
DONE-fix handles being rendered too late IDK how D:
IGNORE-why does loading file select stuff?
DONE-first character of left align text box is incorrect (seems to be space character instead of Nothing)
DONE-why does large canvas slow down stuff so much. Rendering shouldn't be that bad???
  -doesn't seem to be taking advantage of laziness either
  -seems to just be a profiling mode thing...
DONE-new vty layout stuff
  DONE-get rid of post build dependency
  DONE-(tile . fixed)/(tile . stretch) take regular VtyWidget
  DONE-make typedef for (,,,) thing
  DONE-document
  IGNORE-probably get rid of IsLayoutResult class
  DONE-finish LayoutDebugTree (rename)
DONE-change SuperStyle to Maybe PChar :scream:
DONE/IGNORE-decide what to do about layouts (mouse needs pane2)
  -think about doing docking windows or whatever
DONE-no border box support
  -I guess you can make border and text two separate toggles?
DONE-do popup fancy :O
DONE-finish params widget
  DONE-create set of Params modifying widget, something that ultimately does
    Dynamic t SuperOwlParliament -> m (Event t WSEvent)
  DONE-create something like
    layoutDump :: DMap ParamTypeTag (MinDimensions, VtyWidget t ???) -> VtyWidget (DMap ParamTypeTag ???)
  DONE-although tbh, you can just replace DMap with [] since every params widget returns the same type prob?
DONE/IGNORE-TextArea stuff
  -handle updating text zipper when the stext lbox gets updated
  -figure out how to handle funny case where space and newline characters get hidden if they happen right at the end of a wrap
    -you'll need to store a second piece of data alongside TZ to track this (i.e. raw string)
  -clear out pSelectionChanged comments
IGNORE-params
  DONE-prob a view only thing, add hookup for params in goat widget I guess
  -need common methods for reading style of multi-select stuff
  -is there a way to systemize different types of styles
    -SuperStyle
    -TextStyle
    IGNORE-LineStyle
      -make this part of SuperStyle
      -when displaying, show simplified version of it
    -BoxTitle
IGNORE-although maybe you'd be better off just disallowing these from being created (in creation/modify, just ignore if result is 0 size box)
DONE-mouse select should select 0 size elts
DONE-copy pasta translate a little by default?
  -or attempt to place in middle of canvas viewport prob better
DONE-get rid of broadphase state
DONE-generate vty char width table
DONE-see if unicode combining marks work after you generate the table
DONE-write a UT for negative area box text as this is causing a negative index issue somewhere with the text zipper probably
  -you prob want to short circuit if box is negative and just display nothing or whatever and stop updating TZ
DONE/IGNORE-go over box sizing semantics
  -it seems you may be off by one, (i.e. a 2x2 size box renders as a dot D:)
DONE-figure out why sbox doesn't render right in vty
DONE-toMouseManipulators broken
DONE-SEltLine drawer broken when arrow goes in wrong way (indexing into arrow heads wrong)
DONE-if you get an event while BoxText handler is open, it will break undoFirst stuff
  -you need to track when non-handler events come in...
    -you'll have to do this anyways for multi-user mode right?
    -maybe just remake the handler, or perhaps add a reset method to handler??
      -should reset method take SEltLabelChanges... it probably should D:
IGNORE-assert handler is inactive if it does not capture
DONE-box border offset/no offset stuff D:
DONE-box text renderer lol
DONE-box with border test D:
  -pretty sure there is a bug with this in BoxText
IGNORE-default don't fill boxes pls
DONE-right now if you click realease on a text box it will go straight into BoxText handler, only do this if it was already selected
DONE-get basic box working using existing text zipper
  DONE-add UTs (assume align left for now so they'll work when you add alignment)
DONE-add text functionality to SEltBox
DONE/IGNORE-custom serializers for SEltLabel
  DONE-prob just use Data.Binary
  IGNORE-thought you could do something more efficient to omit optional parameters
  IGNORE-save load test
DONE-connect handlers to vty
DONE-connect layers to vty
DONE-sort out input hierarchies in vty
  DONE-support popups
  DONE-layers/canvas separate mouse input
  DONE-keyboard goes to popups/params first, then to goat
  IGNORE-am I missing anything??
DONE-consider making REltId serialized (you'll need this to do connections)
  -remember to support copy pasta of connected elts
DONE/IGNORE-think through what additional data is needed to validate for undo/redo in multi user mode
DONE-rename master branch
DONE-resolve ControllerMeta REltId synchronization issue
DONE-copy pasta
  DONE-implement copy
  DONE-ctrl-v/s/z/etc sent via keyboard,
    -other kind of copy paste supported via KeyboardKey_Paste
    -we'll prob need to do something different for web version...
  DONE-copy pasta test
  IGNORE-I think the way it's handled right now (PFEventTag operations) is cor


:: ARCHIVE START HERE ::



:: 2022 dragable anchor spec ::
- -- takes position and returns anchor position if its valid
  -- not the output XY may not be the input XY because some projecting may happen
  projectAnchor :: AttachmentLocation -> SBox -> XY -> Maybe XY
-anchor move process
  -click to select line
  -clck on anchor to drag
  -case projectAnchor xy of Just -> drag anchor, Nothing -> release attachment
  -note if you drag off to release attachment and drag back in range, it should snap back to attaching
  -note if you start a new line to attach you must first attach to the starting middle attachment location



:: 2022 stuff for Dad to do ::

-address the following TODO in substract_lBox
  -- TODO crop away mleft/mright from mtop'/mbot'

-address the following TODOs in Goat.hs
  1. -- TODO move into its own file
  data GoatState = GoatState {

  2. -- TODO instance GoatState HasOwlTree

  3. -- TODO rename to makeHandlerFromCanvasSelection

  4. (hard)
  -- TODO probably should have done "Endo GoatState" instead of "GoatCmd"
  -- TODO extract this method into another file
  -- TODO make State monad for this
  foldGoatFn :: GoatCmd -> GoatState -> GoatState
    - `Endo GoatState = GoatState -> GoatState`
    - this part of the code was written incorrectly, someday I want to split it up into several functions of type `Endo GoatState`, one for each GoatCmd
    - the unit tests are also written overly complicated. They rely on going through GoatWidget which is very unecessary and makes everything very complicated
    - so the most important part is to create a set of helper functions for unit testing this function directly

-address the following TODOs in OWl.hs
  1. -- TODO remove OwlMapping arg not needed
  locateLeftSiblingIdFromSiblingPosition :: OwlMapping -> Seq REltId -> SiblingPosition -> Maybe REltId

  2. OwlItem oinfo _ -> "elt: " <> (_owlInfo_name oinfo) -- TODO elt type
    for this one, print more info about OwlItem
